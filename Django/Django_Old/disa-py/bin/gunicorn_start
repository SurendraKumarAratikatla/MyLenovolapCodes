#!/bin/bash
# This script is for production. Gunicorn process start listening via a socket (not port). The process starts by
# user with name 'disa'. If you want to try this in developement environment create a new file with appropriate changes.
# For development environment run following command to start gunicorn at port 8001
# gunicorn disa.wsgi:application --bind :8001



origDir=$(pwd);
echo " Fetch the directory name of where this script is present"
scriptDir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "Changing to code directory"
cd "$scriptDir/../";
codeDir=$(pwd)

NAME="disa"                                  # Name of the application
DJANGODIR=$codeDir             # Django project directory
SOCKFILE=$DJANGODIR/run/gunicorn.sock  # we will communicte using this unix socket
USER=disa                                        # the user to run as
GROUP=disa                                     # the group to run as
NUM_WORKERS=2                                     # how many worker processes should Gunicorn spawn
DJANGO_SETTINGS_MODULE=disa.settings.prod             # which settings file should Django use
DJANGO_WSGI_MODULE=disa.wsgi                     # WSGI module name

echo "Starting $NAME as `whoami`"

# Activate the virtual environment
cd $DJANGODIR
source ../virtualenvs/disa/bin/activate
export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DJANGODIR:$PYTHONPATH

# Create the run directory if it doesn't exist
RUNDIR=$(dirname $SOCKFILE)
test -d $RUNDIR || mkdir -p $RUNDIR

# Start your Django Unicorn
# Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)
exec ../virtualenvs/disa/bin/gunicorn ${DJANGO_WSGI_MODULE}:application \
  --name $NAME \
  --workers $NUM_WORKERS \
  --user=$USER --group=$GROUP \
  --bind=unix:$SOCKFILE \
  --log-level=debug \
  --log-file=-